package gui.preview;

import gui.editor.Editor;
import gui.parameters.ParametersImage;
import gui.parameters.ParametersLabel;
import gui.parameters.ParametersPath;
import gui.parameters.ParametersSelection;
import gui.parameters.ParametersText;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.File;
import java.util.ArrayList;
import java.util.Collection;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;

import model.parameters.ImageModel;
import model.parameters.LabelModel;
import model.parameters.PathModel;
import model.parameters.SelectionModel;
import model.parameters.TextModel;
import model.tree.FinishModel;
import model.tree.PanelModel;
import model.tree.ParameterModel;
import model.tree.WorkSpaceTreeModel;
import net.miginfocom.swing.MigLayout;

import org.apache.commons.io.FileUtils;
import org.apache.commons.io.filefilter.TrueFileFilter;

import controller.installation.BackPanelListener;
import controller.installation.ClosePanelListener;
import controller.installation.NextPanelListener;

@SuppressWarnings("serial")
public class PanelPreview extends JFrame {

	private JPanel center = new JPanel(new MigLayout());
	private JScrollPane centerScroll = new JScrollPane(center);
	private NextPanelListener nextL = new NextPanelListener(this);
	private BackPanelListener backL = new BackPanelListener(this);
	private ClosePanelListener closeL = new ClosePanelListener(this);
	private JPanel south = new JPanel(new FlowLayout(FlowLayout.RIGHT));
	private JButton next;
	private JButton back;
	private JButton close;
	private ArrayList<String> parameters;
	private ArrayList<String> panels;

	public PanelPreview() {
		setSize(PanelModel.INITWIDTH, PanelModel.INITHEIGHT);
		setLocationRelativeTo(null);
		setLayout(new BorderLayout());
		setBackground(Color.white);
		parameters = new ArrayList<>();
		panels = new ArrayList<String>();

		add(centerScroll, BorderLayout.CENTER);

		next = new JButton("Next >");
		nextL = new NextPanelListener(this);
		next.addActionListener(nextL);
		back = new JButton("< Back");
		backL = new BackPanelListener(this);
		back.addActionListener(backL);
		close = new JButton("Close");
		ClosePanelListener closeL = new ClosePanelListener(this);
		close.addActionListener(closeL);
		drawFirstCenter();
		drawFirstSouth();
		add(center, BorderLayout.CENTER);
		add(south, BorderLayout.SOUTH);
	}

	public void drawPanel(PanelModel model) {
		setTitle(model.getTitle());
		setSize(model.getWidth(), model.getHeight());
		setResizable(model.isResizable());
		setNewIcon(this);
		nextL.setModel(model);
		backL.setModel(model);
		for (ParameterModel parameter : model.getParameters()) {
			if (parameter.getType().equals(ParameterModel.TEXT)) {

				TextModel txt = (TextModel) parameter.getParameter();
				ParametersText tmp = new ParametersText(txt.getText(),
						txt.isLines());
				JTextField field = tmp.getField();

				if (field != null) {
					field.addKeyListener(new KeyListener() {
						private ArrayList<Character> chars = new ArrayList<>();

						@Override
						public void keyTyped(KeyEvent e) {
							// TODO Auto-generated method stub
							if ((int) e.getKeyChar() != 8) {
								chars.add(e.getKeyChar());
								String pomString = "";
								for (char charPom : chars) {
									pomString += String.valueOf(charPom);
								}
								panels.add(pomString);
							} else {
								if (!panels.isEmpty()) {
									chars.remove(chars.size() - 1);
									panels.remove(panels.size() - 1);
								}
							}

						}

						@Override
						public void keyReleased(KeyEvent e) {
							// TODO Auto-generated method stub
						}

						@Override
						public void keyPressed(KeyEvent e) {
							// TODO Auto-generated method stub

						}
					});

				}
				JTextArea area = tmp.getArea();

				if (area != null)
					area.addKeyListener(new KeyListener() {
						private ArrayList<Character> chars = new ArrayList<>();

						@Override
						public void keyTyped(KeyEvent e) {
							// TODO Auto-generated method stub
							if ((int) e.getKeyChar() != 8) {
								chars.add(e.getKeyChar());
								String pomString = "";
								for (char charPom : chars) {
									pomString += String.valueOf(charPom);
								}
								panels.add(pomString);
							} else {
								if (!panels.isEmpty()) {
									chars.remove(chars.size() - 1);
									panels.remove(panels.size() - 1);

								}
							}

						}

						@Override
						public void keyReleased(KeyEvent e) {
							// TODO Auto-generated method stub

						}

						@Override
						public void keyPressed(KeyEvent e) {
							// TODO Auto-generated method stub

						}
					});

				center.add(tmp, "wrap");
				JPanel empty = new JPanel();
				empty.setSize(10, 10);
				center.add(empty, "wrap");

			} else if (parameter.getType().equals(ParameterModel.SELECTION)) {

				SelectionModel sel = (SelectionModel) parameter.getParameter();
				ParametersSelection tmp = new ParametersSelection(
						sel.getChoicesList(), sel.isType(), sel.getLabel());

				tmp.setParameters(parameters);

				center.add(tmp, "wrap");
				JPanel empty = new JPanel();
				empty.setSize(10, 10);
				center.add(empty, "wrap");

			} else if (parameter.getType().equals(ParameterModel.PATH)) {

				PathModel path = (PathModel) parameter.getParameter();
				ParametersPath tmp = new ParametersPath(path.getLabel(),
						path.getPath());

				JTextField text = tmp.getTfield();
				text.addKeyListener(new KeyListener() {
					private ArrayList<Character> chars = new ArrayList<>();

					@Override
					public void keyTyped(KeyEvent e) {
						// TODO Auto-generated method stub
						if ((int) e.getKeyChar() != 8) {
							chars.add(e.getKeyChar());
							String pomString = "";
							for (char charPom : chars) {
								pomString += String.valueOf(charPom);
							}
							panels.add(pomString);
						} else {
							if (!panels.isEmpty()) {
								chars.remove(chars.size() - 1);
								panels.remove(panels.size() - 1);

							}
						}
					}

					@Override
					public void keyReleased(KeyEvent e) {
						// TODO Auto-generated method stub

					}

					@Override
					public void keyPressed(KeyEvent e) {
						// TODO Auto-generated method stub

					}
				});

				tmp.setParameters(parameters);
				
				center.add(tmp, "wrap");
				JPanel empty = new JPanel();
				empty.setSize(10, 10);
				center.add(empty, "wrap");

			} else if (parameter.getType().equals(ParameterModel.LABEL)) {

				LabelModel label = (LabelModel) parameter.getParameter();
				ParametersLabel tmp = new ParametersLabel(label.getText());
				center.add(tmp, "wrap");
				JPanel empty = new JPanel();
				empty.setSize(10, 10);
				center.add(empty, "wrap");

			} else if (parameter.getType().equals(ParameterModel.IMAGE)) {

				ImageModel img = (ImageModel) parameter.getParameter();
				ParametersImage tmp = new ParametersImage(img.getPath());
				center.add(tmp, "wrap");
				JPanel empty = new JPanel();
				empty.setSize(10, 10);
				center.add(empty, "wrap");
			}
			centerScroll.revalidate();
		}
		revalidate();
	}

	public void deleteCenter() {
		center.removeAll();
	}

	public void drawSouth() {
		next = new JButton("Next >");
		next.addActionListener(nextL);
		close = new JButton("Close");
		close.addActionListener(closeL);
		back = new JButton("< Back");
		back.addActionListener(backL);
		south.add(back);
		south.add(next);
		south.add(close);
		add(south, BorderLayout.SOUTH);
		revalidate();
	}

	public void deleteSouth() {
		south.removeAll();
	}

	public void drawFirstSouth() {
		next = new JButton("Next >");
		next.addActionListener(nextL);
		close = new JButton("Close");
		close.addActionListener(closeL);
		south.add(next);
		south.add(close);
		add(south, BorderLayout.SOUTH);
		revalidate();
	}

	public void drawFirstCenter() {
		WorkSpaceTreeModel root = (WorkSpaceTreeModel) Editor.getInstance()
				.getTree().getModel().getRoot();
		PanelModel model = (PanelModel) root.getChildAt(0);
		setTitle(model.getTitle());
		setSize(model.getWidth(), model.getHeight());
		setResizable(model.isResizable());
		setNewIcon(this);
		nextL.setModel(model);
		backL.setModel(model);
		for (ParameterModel parameter : model.getParameters()) {
			if (parameter.getType().equals(ParameterModel.TEXT)) {

				TextModel txt = (TextModel) parameter.getParameter();
				ParametersText tmp = new ParametersText(txt.getText(),
						txt.isLines());
				JTextField field = tmp.getField();

				if (field != null) {
					field.addKeyListener(new KeyListener() {
						private ArrayList<Character> chars = new ArrayList<>();

						@Override
						public void keyTyped(KeyEvent e) {
							// TODO Auto-generated method stub
							if ((int) e.getKeyChar() != 8) {
								chars.add(e.getKeyChar());
								String pomString = "";
								for (char charPom : chars) {
									pomString += String.valueOf(charPom);
								}
								panels.add(pomString);
							} else {
								if (!panels.isEmpty()) {
									chars.remove(chars.size() - 1);
									panels.remove(panels.size() - 1);

								}
							}

						}

						@Override
						public void keyReleased(KeyEvent e) {
							// TODO Auto-generated method stub
						}

						@Override
						public void keyPressed(KeyEvent e) {
							// TODO Auto-generated method stub

						}
					});

				}
				JTextArea area = tmp.getArea();

				if (area != null)
					area.addKeyListener(new KeyListener() {
						private ArrayList<Character> chars = new ArrayList<>();

						@Override
						public void keyTyped(KeyEvent e) {
							// TODO Auto-generated method stub
							if ((int) e.getKeyChar() != 8) {
								chars.add(e.getKeyChar());
								String pomString = "";
								for (char charPom : chars) {
									pomString += String.valueOf(charPom);
								}
								panels.add(pomString);
							} else {
								if (!panels.isEmpty()) {
									chars.remove(chars.size() - 1);
									panels.remove(panels.size() - 1);

								}
							}

						}

						@Override
						public void keyReleased(KeyEvent e) {
							// TODO Auto-generated method stub

						}

						@Override
						public void keyPressed(KeyEvent e) {
							// TODO Auto-generated method stub

						}
					});

				center.add(tmp, "wrap");
				JPanel empty = new JPanel();
				empty.setSize(10, 10);
				center.add(empty, "wrap");

			} else if (parameter.getType().equals(ParameterModel.SELECTION)) {

				SelectionModel sel = (SelectionModel) parameter.getParameter();
				ParametersSelection tmp = new ParametersSelection(
						sel.getChoicesList(), sel.isType(), sel.getLabel());

				tmp.setParameters(parameters);

				center.add(tmp, "wrap");
				JPanel empty = new JPanel();
				empty.setSize(10, 10);
				center.add(empty, "wrap");

			} else if (parameter.getType().equals(ParameterModel.PATH)) {

				PathModel path = (PathModel) parameter.getParameter();
				ParametersPath tmp = new ParametersPath(path.getLabel(),
						path.getPath());

				JTextField text = tmp.getTfield();
				text.addKeyListener(new KeyListener() {
					private ArrayList<Character> chars = new ArrayList<>();

					@Override
					public void keyTyped(KeyEvent e) {
						// TODO Auto-generated method stub
						if ((int) e.getKeyChar() != 8) {
							chars.add(e.getKeyChar());
							String pomString = "";
							for (char charPom : chars) {
								pomString += String.valueOf(charPom);
							}
							panels.add(pomString);
						} else {
							if (!panels.isEmpty()) {
								chars.remove(chars.size() - 1);
								panels.remove(panels.size() - 1);

							}
						}
					}

					@Override
					public void keyReleased(KeyEvent e) {
						// TODO Auto-generated method stub

					}

					@Override
					public void keyPressed(KeyEvent e) {
						// TODO Auto-generated method stub

					}
				});
				
				tmp.setParameters(parameters);

				center.add(tmp, "wrap");
				JPanel empty = new JPanel();
				empty.setSize(10, 10);
				center.add(empty, "wrap");

			} else if (parameter.getType().equals(ParameterModel.LABEL)) {

				LabelModel label = (LabelModel) parameter.getParameter();
				ParametersLabel tmp = new ParametersLabel(label.getText());
				center.add(tmp, "wrap");
				JPanel empty = new JPanel();
				empty.setSize(10, 10);
				center.add(empty, "wrap");

			} else if (parameter.getType().equals(ParameterModel.IMAGE)) {

				ImageModel img = (ImageModel) parameter.getParameter();
				ParametersImage tmp = new ParametersImage(img.getPath());
				center.add(tmp, "wrap");
				JPanel empty = new JPanel();
				empty.setSize(10, 10);
				center.add(empty, "wrap");
			}
			centerScroll.revalidate();
		}
		revalidate();
	}

	public static void setNewIcon(JFrame parent) {
		WorkSpaceTreeModel root = (WorkSpaceTreeModel) Editor.getInstance()
				.getTree().getModel().getRoot();
		FinishModel model = root.getFinish();
		Collection<File> listOfFiles = FileUtils.listFilesAndDirs(new File(
				System.getProperty("user.dir")), TrueFileFilter.TRUE,
				TrueFileFilter.TRUE);
		for (File file : listOfFiles) {
			if (file.isFile()) {
				if (file.getName().equals(model.getIcon())) {
					String loc = file.getPath();
					String imgLoc = loc.replace(File.pathSeparatorChar, '/');
					ImageIcon img = new ImageIcon(imgLoc);
					parent.setIconImage(img.getImage());
					break;
				}
			}
		}
	}

	public ArrayList<String> getParameters() {
		return parameters;
	}

	public void setParameters(ArrayList<String> parameters) {
		this.parameters = parameters;
	}

	public ArrayList<String> getPanels() {
		return panels;
	}

	public void setPanels(ArrayList<String> panels) {
		this.panels = panels;
	}

}
